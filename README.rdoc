== Welcome to nuig-rnag

This repository contains the proto-type of a Hydra-Head which targets the
NUIG-RNAG dataset. This dataset contains primarily Audio and PDF files.

This is a ruby on rails application, as such to run this application
the user must be somewhat aware of how ruby on rails applications are
run and deployed.

For testing and development you will need to bootstrap the project

  $ git clone ssh://git@tracker.dri.ie/navr/nuig-rnag
  $ cd nuig-rnag
  $ git submodule update --init --recursive
  $ bundle
  $ cp config/database.yml.sample config/database.yml (and edit as appropriate)
  $ cp config/fedora.yml.sample config/fedora.yml (and edit as appropriate)
  $ cp config/jetty.yml.sample config/jetty.yml (and edit as appropriate)
  $ cp config/redis.yml.sample config/redis.yml (and edit as appropriate)
  $ cp config/solr.yml.sample config/solr.yml (and edit as appropriate)
  $ bundle exec rake db:migrate
  $ bundle exec rake db:seed
  $ bundle exec rake jetty:config

Dont forget to prepare the test database with
  $ bundle exec rake db:test:prepare
  $ bundle exec rake dri:fixtures:generate

  You may also need to edit config/settings.yml and/or create config/settings.local.yml

To start the application for demo purposes
  Note: Ensure that a mysql (or mysql replacement) is running.
  (E.G. MariaDB start alias: alias mariadbstart='cd "/opt/local" ;sudo /opt/local/lib/mariadb/bin/mysqld_safe --datadir="/opt/local/var/db/mariadb"')
  $ cd nuig-rnag
  $ rake jetty:start
  $ bundle exec rails server

The db:seed step above will create 3 initial accounts:

* admin@dri.ie (admin user)
* manager@dri.ie (collection manager)
* user@dri.ie (public user)

The password for all 3 accounts is 'password'

To run the unit tests

  $ cd nuig-rnag
  $ rake jetty:start
  $ rake spec

To run the functional tests

  $ cd nuig-rnag
  $ rake jetty:start
  $ rake cucumber or bundle exec cucumber

Additional information can be found by reading up on the drirepo,
nuig-rnag, rspec, cucumber and rails documentation.

To start the resque workers for development

  $ rake environment resque:work RAILS_ENV=development QUEUE="*" VERBOSE=1

== Dependencies

If you are using homenbrew on OSX

  $ brew install ansible coreutils libtool libksba libxml2 libxslt automake autoconf openssl curl curl-ca-bundle readline lzlib gettext pkg-config libyaml mariadb redis clamav sqlite ffmpeg gource phantomjs fits glib imagemagick ghostscript node

== Testing

The unit tests are written using rspec and the functional tests are
written with cucumber.

This project is set up to use guard to automatically run tests as they
are changed.

  $ cd nuig-rnag
  $ bundle exec guard

The poltergeist gem is required for testing, as a result phantomjs binary
to run poltergeist.

* https://github.com/jonleighton/poltergeist
* https://github.com/ariya/phantomjs

== Translations

When translations are added to the english locale files in config/locales
you should run the rake task localefiles with the parameter file which should
be set to the path to the ENGLISH yml file. For example:

  $ rake locales:mergefile file=config/locales/dri/en.yml

This will merge any new keys from the English file into any other locale files
(with the same naming convention) in that directory. The default value for each
key will be the English text.

To merge all files use

  $ rake locales:mergeall

== Settings.yml

This is where the application specific settings are located

  config/settings.yml

Please view and edit this file as needed before deploying the application.

To override settings.yml with local settings please use settings.local.yml.

== Configuation of database.yml, fedora.yml and solr.yml

The configuration files for the NUIG-RNAG application

* config/database.yml
* config/solr.yml
* config/fedora.yml

are not configured initially, there are some sample configurations in
the config directory. These configuration files must be created before
development, testing, deployment. The default sample files can be copied
into the correct locations for testing and development. It is suggested
that these files are not commited to the repository.

== Background jobs

The application includes a queueing system based on Resque and Redis to allow
asynchronous processing of background jobs. This introduces the following dependencies:

  * Redis (server for the queueing system)
  * fits (for extracting metadata from a file)
  * ffmpeg (video file processing tool)
  * imagemagick (image processing)

For testing, the file processing tools should be installed locally with the hydra-head.
See the Dependencies section of this document for more information on installing
these and other dependencies.

By default fits should be installed in the directory /opt/local/fits/ (this can
be changed by modifying the config.fits_path setting in the file
config/initializers/sufia.rb).

By default ffmpeg should be installed in the directory /opt/local/bin (this can
be changed by modifying the ffmpeg_path setting in the file config/settings.yml).

For testing purposes Redis can be installed locally and started with the command

  $ sudo redis-server /opt/local/etc/redis.conf

The worker queues can be started with the following rake task

  $ rake environment resque:work RAILS_ENV=development QUEUE="*" VERBOSE=1

To view your queues and workers you can visit the path /resque on the web
application where resque-web is mounted.

Note that the queuing code is stubbed for the Cucumber tests so you do not need a redis
host running in order to run the tests.

== ClamAV

To enable virus scanning ClamAV needs to be installed.

  $ sudo port install clamav

You will need to create the configuration file freshclam.conf in /opt/local/etc. There is an example
file in /opt/local/etc/example-freshclam.conf. Set the directory for the database files and the log

  DatabaseDirectory /opt/local/share/clamav
  UpdateLogFile /opt/local/var/log/clamav/freshclam.log

Update the virus database

  $ sudo freshclam

Install the clamav Ruby gem

  $ gem install clamav -- --with-cflags=`clamav-config --cflags` --with-ldflags=`clamav-config --libs`

Add the gem to the GemFile

  gem 'clamav'

Run bundler. Virus scanning should now take place when an asset is uploaded.

== Storage

Surrogate files are stored using the Ceph S3 interface. To create surrogates
you will need a Ceph instance running. A Ceph VM is available in the drirepo
repository. To start up Ceph run

  $ vagrant up ceph

When the VM is running, log in with

  $ vagrant ssh ceph

Then create a user with no max bucket limit as follows:

  $ sudo radosgw-admin user create --uid=johndoe --display-name="John Doe" --email=john@example.com --max-buckets=0

This will return an access_key and secret_key which must be added
to the hydra head's config/settings.yml or config/settings.local.yml file as follows:

  S3:
    server: 10.0.1.201
    access_key_id: 4WP751XIFXBH9G97DD91
    secret_access_key: v6tX8bZSeN9IRJAcelHLnQFrsYV8ojxgWa7rn0uz

Note that the keys should be pasted in as they appear in the output of the radosgw-admin command,
but all '\' characters should be stripped.

Note that the storage code is stubbed for the Cucumber tests, but you must have a ceph
host available and configured in order to run the rspec tests.

