== Deployment

Once the test suite passes and the code base has been reviewed and agreed
upon, a branch is created for deployment, in the form release-YY.MM.0.

The release number should be incremented as required.

This branch is then merged with master when ready to be deployed.

=== Steps

These steps will only work if your user is in the merge group and has write access to the master branch.

From the develop branch
  $ git tag -l # list current tags
  $ git checkout -b release-YY.MM.x # you should now be on the deploy branch
  $ git log # get current hash and check on the buildbot that it is passing tests in develop branch
  $ git checkout master # switch to master to perform the merge
  $ git pull
  $ git merge --no-ff release-YY.MM.x # perform the merge
  $ git push
  $ git tag -a YY.MM.x
  $ git push --tags

=== Ansible Deployment

Deployments are carried out one web-server at a time; checking that the server has deployed correctly before moving to the next.
First log in to the loadbalancer dri-lb01. In the file /etc/haproxy/haproxy.cfg comment out the host you intend to deploy to
first in the web-server backend section (backend web_server). Then reload the haproxy config:

  $ /etc/init.d/haproxy reload

Next log in to dri-guest021 as the tchpc user with agent forwarding enabled.

  $ cd ~/ansible-dri-infrastructure/

Edit the inventory/hosts.production file and comment out all hosts in the dri_app section, and dri_app_workers section except
for the host that you want to deploy to. Then run the following command:

  $ ansible-playbook -i inventory/hosts.production site.yml --tags=getfacts,dri_app,dri_app_worker

When the deploy has finished check the app on the server to make sure that it is functioning as expected. If all is OK
repeat the process for the next web-server. The resque workers can be deployed together.

Remember once all servers have been deployed to uncomment all hosts in both the haproxy configuration and the hosts.production file.

=== TODO

List of things that should be fixed in deploying

* run db:seed, migrate etc... on only the first rails app host and not everywhere.
* use ansible-vault to encrypt the passwords for the buildbot/dri-admin machine so they are at least not sitting around in plain text.
* breakup roles/playbooks in to Prepare, Configure and Deploy phases, this is so Prepare steps which run rarely and take a long time don't affect the Configure and Deploy steps which are usually pretty quick.
* Automate the tag and merge to master process.
* Figure out how to do database rollbacks if the db:seed/db:migrate commands roll out the wrong changes.
